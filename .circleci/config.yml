version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: destroy_environments
          when: on_fail
          command: |
             # Use the AWS CLI to delete the CloudFormation stacks
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
      id: 
        type: string
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            echo "In revert-migrations"
            ## Example: kvdb.io
            # https://kvdb.io/PPTqYXosHdaiGu7eukHxku/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            SUCCESS=$(curl -s --insecure https://kvdb.io/PPTqYXosHdaiGu7eukHxku/migration_<< parameters.id >>)
            echo $SUCCESS
            ## Logic for reverting the database state
            if [ $SUCCESS == 1 ];
              then
                cd backend
                npm install
                npm run migrations:revert
                echo "Ran migration:revert"
            fi  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Build-front-end"
          command: |
             cd frontend
             npm i
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Back-end-build"
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: "Run-frontend-test"
         command: |
             cd frontend
             npm install
             npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Run-Back-end-test"
          command: |
             cd backend
             npm install
             npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
         name: "Run-frontend-scan"
         command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force 
            npm audit fix --force   
            npm audit --audit-level=critical       

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Run-Back-end-scan"
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical           

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            cat .circleci/ansible/inventory.txt
            ls ~/project/.circleci/ansible/
            cat ~/project/.circleci/ansible/inventory.txt
            yum -y install tar gzip jq npm
      - run:
          name: "Ensure-back-end-infrastructure-exists"
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}  \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              # exit 1
      - run:
          name: "Ensure-front-end-infrastructure-exist"
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
              # exit 1
      - run:
          name: "Add-back-end-ip-to-ansible-inventory "
          command: |
            # Fetch the public IP of the EC2 instance
            #  "Name=tag:project,Values=udapeople"
            EC2_PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

            # Append the IP to the inventory.txt file
            echo $EC2_PUBLIC_IP >> ~/project/.circleci/ansible/inventory.txt
            # echo "your-instance-name ansible_host=$EC2_PUBLIC_IP ansible_user=ubuntu" >> .circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
            # Persist the modified inventory file to the workspace
            # cp .circleci/ansible/inventory.txt $HOME/workspace/inventory.txt
            # # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
     - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - 'ee:60:c9:be:6e:9e:38:aa:9e:5c:e0:3c:02:fc:2f:a4'
      - attach_workspace:
          at: ~/
      - run:
          name: "Install-dependencies"
          command: |
            apk add openssh-client
            apk add --update ansible
      - run:
          name: "Configure-server"
          command: |
            echo -e "NODE_ENV=development\nENVIRONMENT: development\nTYPEORM_CONNECTION=${TYPEORM_CONNECTION}\nTYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}\nTYPEORM_ENTITIES=${TYPEORM_ENTITIES}\nTYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}\nTYPEORM_HOST=${TYPEORM_HOST}\nTYPEORM_PORT=${TYPEORM_PORT}\nTYPEORM_USERNAME=${TYPEORM_USERNAME}\nTYPEORM_PASSWORD=${TYPEORM_PASSWORD}\nTYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
            cat backend/.env
            cat .circleci/ansible/inventory.txt

            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend
      - destroy-environment     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install 
            npm run migrations >> migrations.txt      
            cat migrations.txt  
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "No migrations are pending" ~/project/backend/migrations.txt
            then
              echo "Successful migration"
              # Using kvdb.io
              curl --insecure https://kvdb.io/PPTqYXosHdaiGu7eukHxku/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else  
              echo "Migration not necessary or not successful"
              # Using kvdb.io
              curl --insecure https://kvdb.io/PPTqYXosHdaiGu7eukHxku/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi

            # if grep -q "success" ~/project/backend/migrations.txt
            # then
            #   curl --insecure https://kvdb.io/PPTqYXosHdaiGu7eukHxku/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            # fi
            # exit 1
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-build
     # Here's where you will add some code to rollback on failure      
      - destroy-environment
     

  deploy-frontend:
    docker:
     - image: circleci/node:13.8.0
       user: root
    steps:
      - checkout
      # - run:
      #     name: install aws aws-cli
      #     command: |
      #       npm install -g aws-cli
      #       aws configure list
      - run:
          name: "Install-dependencies"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: "Get-backend-url"
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: "Deploy-frontend-objects"
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}       

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'ee:60:c9:be:6e:9e:38:aa:9e:5c:e0:3c:02:fc:2f:a4'
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            cd backend
            npm install
            npm run start 
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ------$(cat inventory.txt)"
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11  
    steps:
      - checkout
      - run:
          name: "Install-dependencies"
          command: |
            # your code here
            apk add --update curl nodejs npm
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: "Backend smoke test."
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: "Frontend-smoke-test."
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
             echo ${URL} 
             if curl -s ${URL} | grep "Welcome"
             then
                 return 0
             else
                 return 1
             fi
      - destroy-environment 
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
 
  cloudfront-update:
    docker:
    #  - image: circleci/node:13.8.0 that supports AWS CLI
     - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install-dependencies"
          command: |
            yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: "Update-cloudfront-distribution"
          command: |
            # your code here
            #  export OldWorkflowID=$(aws cloudformation --region us-east-1 \
            #    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            #    --no-paginate --output text)
            # echo "OldWorkflowID = ${OldWorkflowID}"
            # echo "CIRCLE_WORKFLOW_ID = ${CIRCLE_WORKFLOW_ID:0:7}"
            # echo ${OldWorkflowID} > OldWorkflow.txt
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --stack-name InitialStack
            # aws cloudformation deploy \
            #    --template-file .circleci/files/cloudfront.yml \
            #    --stack-name InitialStack \
            #    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            #    --tags project=udapeople
      # Here's where you will add some code to rollback on failure
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/OldWorkflow.txt
      - destroy-environment
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}  
  cleanup:
    docker:
     - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies - tar gzip
          command: |
            yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: "delete old"
          command: |
            ## Fetch the Old workflow ID
            cd ~/project
            cat OldWorkflow.txt
            OldWorkflow=$(cat OldWorkflow.txt)
            echo "OldWorkflow = ${OldWorkflow}"
            echo "CIRCLE_WORKFLOW_ID = ${CIRCLE_WORKFLOW_ID:0:7}"
            if [ "${OldWorkflow}" != ${CIRCLE_WORKFLOW_ID:0:7} ]
              then
                echo "delete process"
              aws s3 rm "s3://udapeople-${OldWorkflow}" --recursive
              sleep 30
              aws cloudformation delete-stack --region us-east-1 --stack-name "UdaPeople-BackEnd-${OldWorkflow}" 
              aws cloudformation delete-stack --region us-east-1 --stack-name "UdaPeople-FrontEnd-${OldWorkflow}" 
              else
                echo "can not clean up"
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]